@startuml
class Container {
 -name
 -image
 -execute_container()
}

class Pod {
 -id
 -name
 -schedulerName
 -Container
 -Requirements
 -create_pod()
 -run_pod()
}

class Queue {
 -size
 -list of pods in some order
 -push()
 -pop()
}
note left of Queue::push
  methods to insert and remove pods
end note

class Scheduler {
 -name
 -scheduling_cycle()
}

class Priorities {
 -_SelectorSpreadPriority
 -_InterPodAffinityPriority
 -_LeastRequestedPriority
 -_MostRequestedPriority
 -_RequestedToCapacityRatioPriority
 -_BalancedResourceAllocation
 -_NodePreferAvoidPodsPriority
 -_NodeAffinityPriority
 -_TaintTolerationPriority
 -_ImageLocalityPriority
 -_ServiceSpreadingPriority
 -_EqualPriority
 -_EvenPodsSpreadPriority
}

class Predicates {
 -_PodFitsHostPorts
 -_PodFitsHost
 -_PodFitsResources
 -_MatchNodeSelector
 -_NoVolumeZoneConflict
 -_NoDiskConflict
 -_MaxCSIVolumeCount
 -_PodToleratesNodeTaints
 -_CheckVolumeBinding
}

class Node {
 -id
 -resources
 -state
 -list of pods
 -cpu
 -memory
 -execute_pod()
}
note left of Node::state
  e.g. how many pods are running already
end note

class Cluster {
 -collection of nodes
 -start_simulation()
}
note right of Cluster::start_simulation
  1. create pods
  2. create nodes
  3. push pods in queue
  4. start scheduler
  5. pop pod
  6. apply P&P
  7. select node
  8. bind pod with node
  9. pop next pod
end note

Queue ^-- Pod
Pod --^ Container
Cluster -- Queue
Scheduler -- Queue
Scheduler --^ Priorities
Scheduler --^ Predicates
Cluster -- Scheduler
Cluster *-- Node
Node -- Pod
@enduml