@startuml
class Container {
 -name
 -image
 -memory
 -cpu
}

class Pod {
 -id
 -name
 -schedulerName
 -nodeName
 -memory
 -cpu
 -is_bind
 -plugin
 -nodeSelector
 -port
 -node
 -arrivalTime
 -serviceTime
 -container_list
 -schedulingRetries
 -assignedNode
 -wait_in_queue
 -binded
 -serialize()
}

class Queue {
 -put(Pod)
 -get()
}

class Kubescheduler {
 -name
 -feasible_nodes []
 -selected_node
 -predicate_methods [methods..]
 -priorites_methods [methods..]
 -scheduling_cycle()
}

class Priorities {
 -least_used_node
 -most_used_node
 -selectorSpreadPriority()
 -interPodAffinityPriority()
 -leastRequestedPriority()
 -mostRequestedPriority()
 -requestedToCapacityRatioPriority()
 -balancedResourceAllocation()
 -nodePreferAvoidPodsPriority()
 -nodeAffinityPriority()
 -taintTolerationPriority()
 -imageLocalityPriority()
 -serviceSpreadingPriority()
 -equalPriority()
 -evenPodsSpreadPriority()
}

class Predicates {
 -podFitsHostPorts()
 -podFitsHost()
 -podFitsResources()
 -matchNodeSelector()
 -noVolumeZoneConflict()
 -noDiskConflict()
 -maxCSIVolumeCount()
 -podToleratesNodeTaints()
 -checkVolumeBinding()
}

class Cluster {
 -master_node
 -node_list []
 -active_nodes
 -add_node(node)
 -get_node_list()
}

class Node {
 -id
 -name
 -num_of_pods
 -memory
 -cpu
 -score
 -port []
 -label
 -pod_list []
 -num_pod_history
 -cluster
 -active
 -add_pod()
 -remove_pod()
 -serialize()
}
note right of Node::num_of_pods
  e.g. how many pods are running in the node
end note

note right of Cluster::master_node
  1. create nodes
  2. create pods
  3. push pods in the queue
  4. start kube-scheduler
  5. pop the pod(s) from the queue
  6. apply P&P
  7. select a feasible node
  8. bind the pod with node
end note

Queue -- Pod
Pod -- Container
Cluster -- Queue
Kubescheduler -- Queue
Kubescheduler --^ Priorities
Kubescheduler --^ Predicates
Cluster -- Kubescheduler
Cluster -- Node
Node -- Pod
@enduml
